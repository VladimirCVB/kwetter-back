# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

name: Admin service CI

on:
  push:
    branches-ignore:
      - main
      - release*
    paths:
      - admin-service/**

jobs:
  eslint:
    name: Check linting and formatting
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    env:
      working-directory: ./admin-service
    strategy:
      fail-fast: false
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v3

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
        working-directory: ${{ env.working-directory }}

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: |
          yarn config set ignore-engines true
          yarn
        working-directory: ${{ env.working-directory }}

      - name: Check linting
        run: yarn lint:check
        working-directory: ${{ env.working-directory }}

      - name: Check formatting
        run: yarn format:check
        working-directory: ${{ env.working-directory }}

  test:
    name: Tests
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    env:
      working-directory: ./admin-service
      DB_NAME: admin-service
      DB_USER: postgres
      DB_PASSWORD: postgres
    strategy:
      fail-fast: false
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v3

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Init docker
        run: docker-compose up -d
        working-directory: ${{ env.working-directory }}

      - name: Sleep for 10s
        uses: juliangruber/sleep-action@v1
        with:
          time: 10s

      - name: Install
        run: |
          yarn config set ignore-engines true
          yarn
        working-directory: ${{ env.working-directory }}

      - name: Run migrations
        run: |
           yarn migrate
        working-directory: ${{ env.working-directory }}

      - name: Test
        run: |
          yarn test
        working-directory: ${{ env.working-directory }}

      - name: E2E tests
        run: |
          yarn test:e2e
        working-directory: ${{ env.working-directory }}

      - name: Teardown docker
        run: docker-compose down
        working-directory: ${{ env.working-directory }}
