version: '3'
services:
  gateway:
    build: ./api-gateway
    # image: vladimirab/gateway
    restart: always
    hostname: api-gateway
    env_file:
      - ./api-gateway/.env
    environment:
      USER_SERVICE_HOST: user-service
      ADMIN_SERVICE_HOST: admin-service
      POST_SERVICE_HOST: post-service
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
    ports:
      - 2999
    networks:
      - backend
      - frontend
    depends_on:
      - user-service
      - admin-service
      - post-service

  # frontend-service:
  #   build:
  #     context: ./front
  #     dockerfile: Dockerfile
  #   command:
  #     sh -c "npm run dev"
  #   restart: always
  #   hostname: frontend-service
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - frontend
  #   labels:
  #     kompose.service.type: LoadBalancer
  #     kompose.service.expose: 'font-end'

  user-service:
    build: ./user-service
    # image: vladimirab/user-service
    restart: always
    hostname: user-service
    env_file:
      - ./user-service/.env
    environment:
      SECRET: ${SECRET:-MyRandomSecret}
      DB_HOST: 34.90.122.185
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      DB_NAME: ${DB_NAME:-user-service}
      PORT: ${PORT:-3501}
      TCP: ${PORT:-3500}
      USER_SERVICE_HOST: user-service
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
    ports:
      - 3501
    networks:
      - backend
    links:
      - postgres
      - kafka
    depends_on:
      - postgres
      - kafka
    labels:
      kompose.service.type: LoadBalancer
      kompose.service.expose: 'users'

  admin-service:
    build: ./admin-service
    restart: always
    hostname: admin-service
    env_file:
      - ./admin-service/.env
    environment:
      DB_HOST: 34.90.122.185
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      DB_NAME: ${DB_NAME:-admin-service}
      PORT: ${PORT:-3502}
      TCP: ${PORT:-3003}
      ADMIN_SERVICE_HOST: admin-service
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres
    labels:
      kompose.service.type: LoadBalancer
      kompose.service.expose: 'admin'

  post-service:
    build: ./post-service
    restart: always
    hostname: post-service
    env_file:
      - ./post-service/.env
    environment:
      DB_HOST: 34.90.122.185
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      DB_NAME: ${DB_NAME:-post-service}
      PORT: ${PORT:-3503}
      TCP: ${PORT:-3001}
      POST_SERVICE_HOST: post-service
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres
    labels:
      kompose.service.type: LoadBalancer
      kompose.service.expose: 'post'

  postgres:
    container_name: postgres_container_kwt
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend
    labels:
      kompose.service.type: LoadBalancer
      kompose.service.expose: 'postgres'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend
    labels:
      kompose.service.type: LoadBalancer
      kompose.service.expose: 'zookeeper'
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
    labels:
      kompose.service.type: LoadBalancer
      kompose.service.expose: 'kafka'

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres: {}